version: appveyor.{build}

image: Visual Studio 2015

configuration: Release

environment:
  global:
    SDL_AUDIODRIVER: dummy
    ACE_VC_SLN: ACE_wrappers_vc14.sln
  
  matrix:
    - platform: Win32
      cmake_generator: Visual Studio 14 2015
      system_arch: x86
      zbar_arch: i686

    - platform: x64
      cmake_generator: Visual Studio 14 2015 Win64
      system_arch: x64
      zbar_arch: x86_64

cache:
  - C:\ACE
  - C:\YARP
  - C:\SDL2

init:
  # Dependency version tags
  - cmd: set ACE_LATEST=6.4.2
  - cmd: set YARP_LATEST=2.3.68
  - cmd: set SDL2_LATEST=2.0.5
  - cmd: set SDL2_IMAGE_LATEST=2.0.1
  - cmd: set SDL2_TTF_LATEST=2.0.14
  - cmd: set SDL2_MIXER_LATEST=2.0.1
  - cmd: set ZBAR_LATEST=0.10-rd1

  # Download/clone paths and URLs
  - cmd: set DOWNLOADS_PATH=C:\downloads

  - cmd: set ACE_DOWNLOAD_URL=http://download.dre.vanderbilt.edu/previous_versions/ACE-%ACE_LATEST%.zip
  - cmd: set YARP_DOWNLOAD_URL=https://github.com/robotology/yarp/archive/v%YARP_LATEST%.zip
  - cmd: set SDL2_DOWNLOAD_URL=https://www.libsdl.org/release/SDL2-devel-%SDL2_LATEST%-VC.zip
  - cmd: set SDL2_IMAGE_DOWNLOAD_URL=https://www.libsdl.org/projects/SDL_image/release/SDL2_image-devel-%SDL2_IMAGE_LATEST%-VC.zip
  - cmd: set SDL2_TTF_DOWNLOAD_URL=https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-devel-%SDL2_TTF_LATEST%-VC.zip
  - cmd: set SDL2_MIXER_DOWNLOAD_URL=https://www.libsdl.org/projects/SDL_mixer/release/SDL2_mixer-devel-%SDL2_MIXER_LATEST%-VC.zip
  - cmd: set ZBAR_DOWNLOAD_URL=https://github.com/asrob-uc3m/ZBar/releases/download/%ZBAR_LATEST%/zbar-%ZBAR_LATEST%-%ZBAR_ARCH%-setup.exe

  # Print some useful informations:
  - cmd: set
  - cmd: cmake --version
  - cmd: msbuild /version

install:
  # Create folders
  - cmd: md %DOWNLOADS_PATH%

  # Download and build ACE (if not in cache)
  - ps: >-
        if (
            (Test-Path -Path C:\ACE -PathType Container) -And
            (Test-Path -Path C:\ACE\.version -PathType Leaf) -And
            (Get-Content C:\ACE\.version | Where-Object { $_.Equals("$env:ACE_LATEST") })
        ) {
            Write-Host "ACE found in cache ($env:ACE_LATEST)"
        } else {
            Write-Host "ACE not in cache or version mismatch, running download and build step..."
            Write-Host "Downloading $env:ACE_DOWNLOAD_URL"
            Start-FileDownload "$env:ACE_DOWNLOAD_URL" -FileName "$env:DOWNLOADS_PATH\ace.zip"
            7z x -y -o"$env:DOWNLOADS_PATH" "$env:DOWNLOADS_PATH\ace.zip"
            Add-Content "$env:DOWNLOADS_PATH\ACE_wrappers\ace\config.h" "#include `"ace/config-win32.h`""
            msbuild "$env:DOWNLOADS_PATH\ACE_wrappers\$env:ACE_VC_SLN" /m /v:m
            Write-Host "Copying selected contents of $env:DOWNLOADS_PATH\ACE_wrappers to C:\ACE"
            robocopy "$env:DOWNLOADS_PATH\ACE_wrappers\ace" C:\ACE\ace /e /xd "$env:DOWNLOADS_PATH\ACE_wrappers\ace\$env:CONFIGURATION" /ns /nc /nfl /ndl /njh
            xcopy "$env:DOWNLOADS_PATH\ACE_wrappers\lib" C:\ACE\lib /e /i /y /q
            Set-Content C:\ACE\.version "$env:ACE_LATEST"
        }
  - cmd: set ACE_ROOT=C:\ACE
  - cmd: set PATH=%PATH%;%ACE_ROOT%\lib

  # Download and build YARP (if not in cache)
  - ps: >-
        if (
            (Test-Path -Path C:\YARP -PathType Container) -And
            (Test-Path -Path C:\YARP\.version -PathType Leaf) -And
            (Get-Content C:\YARP\.version | Where-Object { $_.Equals("$env:YARP_LATEST") })
        ) {
            Write-Host "YARP found in cache ($env:YARP_LATEST)"
        } else {
            Write-Host "YARP not in cache or version mismatch, running download and build step..."
            Write-Host "Downloading $env:YARP_DOWNLOAD_URL"
            Start-FileDownload "$env:YARP_DOWNLOAD_URL" -FileName "$env:DOWNLOADS_PATH\yarp.zip"
            7z x -y -o"$env:DOWNLOADS_PATH" "$env:DOWNLOADS_PATH\yarp.zip"
            $env:yarp_temp = "$env:DOWNLOADS_PATH\yarp-$env:YARP_LATEST"
            cmake -H"$env:yarp_temp" -B"$env:yarp_temp\build" -G"$env:CMAKE_GENERATOR" -DCMAKE_INSTALL_PREFIX:PATH=C:\YARP
            cmake --build "$env:yarp_temp\build" --config "$env:CONFIGURATION" --target INSTALL -- /m /v:m
            Set-Content C:\YARP\.version "$env:YARP_LATEST"
        }
  - cmd: set YARP_DIR=C:\YARP\cmake
  - cmd: set PATH=%PATH%;C:\YARP\bin

  # Download and extract SDL2 libraries (if not in cache)
  - ps: $sdl2_releases = @("$env:SDL2_LATEST", "image_$env:SDL2_IMAGE_LATEST", "ttf_$env:SDL2_TTF_LATEST", "mixer_$env:SDL2_MIXER_LATEST")
  - ps: >-
        if (
            (Test-Path -Path C:\SDL2 -PathType Container) -And
            (Test-Path -Path C:\SDL2\.version -PathType Leaf) -And
            -Not (Compare-Object -ReferenceObject (Get-Content C:\SDL2\.version) -DifferenceObject $sdl2_releases -PassThru)
        ) {
            Write-Host "SDL2 found in cache:"
            Write-Host "SDL2 = $env:SDL2_LATEST"
            Write-Host "SDL2_image = $env:SDL2_IMAGE_LATEST"
            Write-Host "SDL2_ttf = $env:SDL2_TTF_LATEST"
            Write-Host "SDL2_mixer = $env:SDL2_MIXER_LATEST"
        } else {
            Write-Host "SDL2 not in cache or version mismatch, running download and extract step..."
            Write-Host "Downloading $env:SDL2_DOWNLOAD_URL"
            Start-FileDownload "$env:SDL2_DOWNLOAD_URL" -FileName "$env:DOWNLOADS_PATH\sdl2.zip"
            Write-Host "Downloading $env:SDL2_IMAGE_DOWNLOAD_URL"
            Start-FileDownload "$env:SDL2_IMAGE_DOWNLOAD_URL" -FileName "$env:DOWNLOADS_PATH\sdl2_image.zip"
            Write-Host "Downloading $env:SDL2_TTF_DOWNLOAD_URL"
            Start-FileDownload "$env:SDL2_TTF_DOWNLOAD_URL" -FileName "$env:DOWNLOADS_PATH\sdl2_ttf.zip"
            Write-Host "Downloading $env:SDL2_MIXER_DOWNLOAD_URL"
            Start-FileDownload "$env:SDL2_MIXER_DOWNLOAD_URL" -FileName "$env:DOWNLOADS_PATH\sdl2_mixer.zip"
            7z x -y -o"$env:DOWNLOADS_PATH\SDL2_temp" "$env:DOWNLOADS_PATH\sdl2*.zip"
            Write-Host "Copying contents of $env:DOWNLOADS_PATH\SDL2_temp to C:\SDL2"
            Get-ChildItem -Directory "$env:DOWNLOADS_PATH\SDL2_temp" | ?{ $_.PSIsContainer } | ForEach-Object {
                xcopy $_.FullName C:\SDL2 /e /i /y /q
            }
            $sdl2_releases | Set-Content C:\SDL2\.version
        }
  - cmd: set SDL2DIR=C:\SDL2
  - cmd: set PATH=%PATH%;%SDL2DIR%\lib\%SYSTEM_ARCH%

  # Download and install ZBar
  - cmd: echo Downloading %ZBAR_DOWNLOAD_URL%
  - cmd: appveyor DownloadFile "%ZBAR_DOWNLOAD_URL%" -FileName "%DOWNLOADS_PATH%\zbar.exe"
  - cmd: '"%DOWNLOADS_PATH%\zbar.exe" /S /D=C:\ZBar'
  - cmd: set ZBAR_DIR=C:\ZBar
  - cmd: set PATH=%PATH%;%ZBAR_DIR%\bin

before_build:
  - cmd: echo Configuring project %APPVEYOR_PROJECT_NAME%
  - cmd: cmake -H"%APPVEYOR_BUILD_FOLDER%" -B"%APPVEYOR_BUILD_FOLDER%\build" -G"%CMAKE_GENERATOR%" -DCMAKE_INSTALL_PREFIX:PATH="%APPVEYOR_BUILD_FOLDER%\install"

build:
  project: build\robotDevastation.sln
  parallel: false
  verbosity: minimal

after_build:
  - cmd: cmake --build "%APPVEYOR_BUILD_FOLDER%\build" --config "%CONFIGURATION%" --target INSTALL -- /v:m
  - cmd: set YARP_DATA_DIRS=%APPVEYOR_BUILD_FOLDER%\install\share\rd

before_test:
  - ps: Write-Host "$env:PATH"
  - ps: $testPath = "$env:APPVEYOR_BUILD_FOLDER\build\bin\$env:CONFIGURATION"
  - ps: $testFramework = "Google Test"
  - ps: >-
        $tests = @(
            "testDeadState",
            "testFSMBuilder",
            "testFSM",
            "testGameState",
            "testInitState",
            "testMentalMap",
            "testMockAudioManager",
            "testMockInputManager",
            "testMockRobotManager",
            "testProcessorImageEventListener",
            "testYarpNetworkManager",
            "testSDLAudioManager",
            "testRobotDevastation"
        )
  - ps: >-
        foreach ($test in $tests) {
            Add-AppveyorTest -Name "$test" -Framework "$testFramework" -FileName "$test.exe" -Outcome None
        }
  - ps: $testsHavePassed = $true

test_script:
  - ps: >-
        foreach ($test in $tests) {
            Update-AppveyorTest -Name "$test" -Framework "$testFramework" -FileName "$test.exe" -Outcome Running
            $date1 = Get-Date
            & "$testPath\$test.exe"
            $date2 = Get-Date
            $exitCode = $LastExitCode
            $duration = [long](New-TimeSpan -Start $date1 -End $date2).TotalMilliseconds
            $outcome = If ($exitCode -eq 0) { "Passed" } Else { "Failed" }
            Update-AppveyorTest -Name "$test" -Framework "$testFramework" -FileName "$test.exe" -Outcome "$outcome" -Duration $duration
            $testsHavePassed = $testsHavePassed -And ($exitCode -eq 0)
        }

after_test:
  - ps: If (-Not $testsHavePassed) { exit 1 }
